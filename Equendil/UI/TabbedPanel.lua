import "Turbine.UI";import "Turbine.UI.Lotro";-- Tabulated panel as used by Turbine in the legendary item window-- Size: 621, 432-- Resource definitionsPanelBlue = {	selected = { left = 0x410E7FE0, center = 0x410E7FE3, right = 0x410E7FE6 },	highlighted = {	left = 0x410E7FE1, center = 0x410E7FE4,	right = 0x410E7FE7 },	normal = { left = 0x410E7FE2, center = 0x410E7FE5, right = 0x410E7FE8 },	backgroundDecoration = { 		topLeft = 0x411127E7, 		top = 0x411127E6,		topRight = 0x411127E8,		right = 0x411127E5,		bottomRight = 0x411127E3,		bottom = 0x411127E1,		bottomLeft = 0x411127E2,		left = 0x411127E4,		centerColor = Turbine.UI.Color( 1,0,0,0 )	}};PanelRed = {	selected = { left = 0x410E7FE9, center = 0x410E7FEC, right = 0x410E7FEF },	highlighted = {	left = 0x410E7FEA, center = 0x410E7FED,	right = 0x410E7FF0 },	normal = { left = 0x410E7FEB, center = 0x410E7FEE, right = 0x410E7FF1 },	backgroundDecoration = { 		topLeft = 0x411127EA, 		top = 0x411127EB,		topRight = 0x411127EC,		right = 0x411127EE,		bottomRight = 0x411127F1,		bottom = 0x411127F0,		bottomLeft = 0x411127EF,		left = 0x411127ED,		centerColor = Turbine.UI.Color( 1,0,0,0 )	}};PanelGreen = {	selected = { left = 0x410E7FF2, center = 0x410E7FF5, right = 0x410E7FF8 },	highlighted = {	left = 0x410E7FF3, center = 0x410E7FF6,	right = 0x410E7FF9 },	normal = { left = 0x410E7FF4, center = 0x410E7FF7, right = 0x410E7FFA },	backgroundDecoration = { 		topLeft = 0x411127FA, 		top = 0x411127FB,		topRight = 0x411127FC,		right = 0x411127FE,		bottomRight = 0x41112801,		bottom = 0x41112800,		bottomLeft = 0x411127FF,		left = 0x411127FD,		centerColor = Turbine.UI.Color( 1,0,0,0 )	}};PanelYellow = {	selected = { left = 0x410E7FFB, center = 0x410E7FFE, right = 0x410E8001 },	highlighted = {	left = 0x410E7FFC, center = 0x410E7FFF,	right = 0x410E8002 },	normal = { left = 0x410E7FFD, center = 0x410E8000, right = 0x410E8003 },	backgroundDecoration = { 		topLeft = 0x411127F2, 		top = 0x411127F3,		topRight = 0x411127F4,		right = 0x411127F6,		bottomRight = 0x411127F9,		bottom = 0x411127F8,		bottomLeft = 0x411127F7,		left = 0x411127F5,		centerColor = Turbine.UI.Color( 1,0,0,0 )	}};PanelPurple = {	selected = { left = 0x410E8004, center = 0x410E8007, right = 0X410E800A },	highlighted = {	left = 0x410E8005, center = 0x410E8008,	right = 0x410E800B },	normal = { left = 0x410E8006, center = 0x410E8009, right = 0x410E800C },	backgroundDecoration = { 		topLeft = 0x41112819, 		top = 0x41112818,		topRight = 0x4111281A,		right = 0x41112817,		bottomRight = 0x41112815,		bottom = 0x41112813,		bottomLeft = 0x41112814,		left = 0x41112816,		centerColor = Turbine.UI.Color( 1,0,0,0 )	}};PanelOrange = {	selected = { left = 0x410E800D, center = 0x410E8010, right = 0x410E8013 },	highlighted = {	left = 0x410E800E, center = 0x410E8011,	right = 0x410E8014 },	normal = { left = 0x410E800F, center = 0x410E8012, right = 0x410E8015 },	backgroundDecoration = { 		topLeft = 0x41112811, 		top = 0x41112810,		topRight = 0x41112812,		right = 0x4111280F,		bottomRight = 0x4111280D,		bottom = 0x4111280B,		bottomLeft = 0x4111280C,		left = 0x4111280E,		centerColor = Turbine.UI.Color( 1,0,0,0 )	}};PanelTeal = {	selected = { left = 0x4110F8AD, center = 0x4110F8AA, right = 0x4110F8B0 },	highlighted = {	left = 0x4110F8AF, center = 0x4110F8AC,	right = 0x4110F8B2 },	normal = { left = 0x4110F8AE, center = 0x4110F8AB, right = 0x4110F8B1 },	backgroundDecoration = { 		topLeft = 0x4111281B, 		top = 0x4111281C,		topRight = 0x4111281D,		right = 0x4111281F,		bottomRight = 0x41112822,		bottom = 0x41112821,		bottomLeft = 0x41112820,		left = 0x4111281E,		centerColor = Turbine.UI.Color( 1,0,0,0 )	}};PanelMagenta = {	selected = { left = 0x4110F8B6, center = 0x4110F8B3, right = 0x4110F8B9 },	highlighted = {	left = 0x4110F8B8, center = 0x4110F8B5,	right = 0x4110F8BB },	normal = { left = 0x4110F8B7, center = 0x4110F8B4, right = 0x4110F8BA },	backgroundDecoration = { 		topLeft = 0x41112809, 		top = 0x41112808,		topRight = 0x4111280A,		right = 0x41112807,		bottomRight = 0x41112804,		bottom = 0x41112802,		bottomLeft = 0x41112803,		left = 0x41112806,		centerColor = Turbine.UI.Color( 1,0,0,0 )	}};PanelFushia = {	selected = { left = 0x4112FC2C, center = 0x4112FC2F, right = 0x4112FC32 },	highlighted = { left = 0x4112FC2D, center = 0x4112FC30, right = 0x4112FC33 },	normal = { left = 0x4112FC2E, center = 0x4112FC31, right = 0x4112FC34 },	backgroundDecoration = {		topLeft = 0x4112FC1C, 		top = 0x4112FC1D,		topRight = 0x4112FC1E,		right = 0x4112FC20,		bottomRight = 0x4112FC23,		bottom = 0x4112FC22,		bottomLeft = 0x4112FC21,		left = 0x4112FC1F,		centerColor = Turbine.UI.Color( 1,0,0,0 )	}}PanelGrey = {	selected = { left = 0x4112FC35, center = 0x4112FC38, right = 0x4112FC3B },	highlighted = { left = 0x4112FC36, center = 0x4112FC39, right = 0x4112FC3C },	normal = { left = 0x4112FC37, center = 0x4112FC3A, right = 0x4112FC3D },	backgroundDecoration = {		topLeft = 0x4112FC24, 		top = 0x4112FC25,		topRight = 0x4112FC26,		right = 0x4112FC28,		bottomRight = 0x4112FC2B,		bottom = 0x4112FC2A,		bottomLeft = 0x4112FC29,		left = 0x4112FC27,		centerColor = Turbine.UI.Color( 1,0,0,0 )	}	}Panels = { PanelBlue, PanelRed, PanelGreen, PanelYellow, PanelPurple, PanelOrange, PanelTeal, PanelMagenta, PanelFushia, PanelGrey };TabbedPanel = class( Turbine.UI.Control );	function TabbedPanel:Constructor()	Turbine.UI.Control.Constructor( self );	self:SetSize( 621, 432 );	self.Tabbed = Equendil.Utils.Event();	self.background = Turbine.UI.Control();	self.background:SetParent( self );	self.background:SetPosition( 0, 36 );	self.background:SetSize( 621, 396 );		function _MakeTabHeader() 		local control = Turbine.UI.Control();		control:SetParent( self );		--  cheating here, main control is larger than the actual tab header outline to allow for overflowing backgrounds, everything shifted a bit as a consequence		control:SetSize( 90, 40 ); 				control.left = Turbine.UI.Control();		control.left:SetParent( control );		control.left:SetMouseVisible( false );		control.left:SetSize( 12, 32 );		control.left:SetPosition( 8, 8 );		control.left:SetBlendMode( Turbine.UI.BlendMode.AlphaBlend );				control.center = Turbine.UI.Control();		control.center:SetParent( control );		control.center:SetMouseVisible( false );		control.center:SetSize( 51, 32 );		control.center:SetPosition( 12+8, 8 );		control.center:SetBlendMode( Turbine.UI.BlendMode.AlphaBlend );				control.right = Turbine.UI.Control();		control.right:SetParent( control );		control.right:SetMouseVisible( false );		control.right:SetSize( 12, 32 );		control.right:SetPosition( 63+8, 8 );		control.right:SetBlendMode( Turbine.UI.BlendMode.AlphaBlend );		control.background = Turbine.UI.Control();		control.background:SetParent( control );		control.background:SetMouseVisible( false );		control.background:SetSize( 90, 40 );		control.background:SetPosition( 0, 0 );		control.background:SetBlendMode( Turbine.UI.BlendMode.AlphaBlend );				control.label = Turbine.UI.Label();		control.label:SetParent( control );		control.label:SetMouseVisible( false );		control.label:SetSize( 74, 28 );		control.label:SetPosition( 8, 8 );		control.label:SetFont( Turbine.UI.Lotro.Font.TrajanProBold22 );		control.label:SetFontStyle( Turbine.UI.FontStyle.Outline );		control.label:SetForeColor( Turbine.UI.Color( 1, 0.9, 0.9, 0.9 ) );		control.label:SetTextAlignment( Turbine.UI.ContentAlignment.MiddleCenter );				control:SetMouseVisible( true ); -- have to do that after the other control have been attached or it won't recieve anything still ...				return control;	end	self.tabs = {};	self.backgrounds = {}		for i = 1, 10 do 		self.backgrounds[i] = Equendil.UI.DecoratedContainer( Panels[i].backgroundDecoration );		self.backgrounds[i]:SetParent( self.background );		self.backgrounds[i]:SetSize( 621, 396 );		self.backgrounds[i]:SetBlendMode( Turbine.UI.BlendMode.AlphaBlend );		-- self.backgrounds[i]:SetZOrder( 100 );		self.backgrounds[i]:SetVisible( false );		self.tabs[i] = _MakeTabHeader();		self.tabs[i]:SetPosition( 10 + ( ( i - 1 )* 75 ) -8, 0 ); -- shifted -8 as a consequence of larger control for overflowing background		_SetTabBackground( self.tabs[i], Panels[i].normal );		self.tabs[i].MouseClick = function( sender, args ) self:_SelectTab( i ) end		self.tabs[i].MouseEnter = function( sender, args ) self:_HighlightHeader( i, true ) end		self.tabs[i].MouseLeave = function( sender, args ) self:_HighlightHeader( i, false ) end	end			self.selectedTab = -1;	self:_SelectTab( 1 );end	function TabbedPanel:SetSize( width, height )	Turbine.UI.Window.SetSize( self, width, height );	self:_DoLayout();endfunction TabbedPanel:SetWidth( width )	Turbine.UI.Window.SetWidth( self, width );	self:_DoLayout();endfunction TabbedPanel:SetHeight( height )	Turbine.UI.Window.SetHeight( self, height );	self:_DoLayout();endfunction TabbedPanel:_DoLayout()	if self.backgrounds == nil then return end -- not initialized		local width, height = self:GetSize();		self.background:SetSize( width, height - 36 );	for i = 1, 10 do 		self.backgrounds[i]:SetSize( width, height - 36 );	endend		function _SetTabBackground( tabControl, resources )	tabControl.left:SetBackground( resources.left );	tabControl.center:SetBackground( resources.center );	tabControl.right:SetBackground( resources.right );endfunction TabbedPanel:SelectTab( index )	self:_SelectTab( index );endfunction TabbedPanel:_SelectTab( index )	if self.selectedTab ~= -1 then		self.backgrounds[self.selectedTab]:SetVisible( false );		_SetTabBackground( self.tabs[self.selectedTab], Panels[self.selectedTab].normal );		self.tabs[self.selectedTab]:SetZOrder( 0 );	end	self.selectedTab = index;		if self.selectedTab ~= -1 then		self.backgrounds[self.selectedTab]:SetVisible( true );		_SetTabBackground( self.tabs[self.selectedTab], Panels[self.selectedTab].selected );		self.tabs[self.selectedTab]:SetZOrder( 101 );		-- self.background:SetBackground( Panels[self.selectedTab].background );		self.Tabbed( self.selectedTab );	endendfunction TabbedPanel:_HighlightHeader( pos, flag )	if pos ~= self.selectedTab then		if flag then			_SetTabBackground( self.tabs[pos], Panels[pos].highlighted );		else			_SetTabBackground( self.tabs[pos], Panels[pos].normal );		end	endendfunction TabbedPanel:GetPanel()	return self.background;end	function TabbedPanel:SetTabName( index, name )	self.tabs[index].label:SetText( name );endfunction TabbedPanel:SetBackdrop( index, resource )	if resource ~= nil then		self.tabs[index].background:SetBackground( resource );		self.tabs[index].background:SetVisible( true );	else		self.tabs[index].background:SetVisible(false );	endend	