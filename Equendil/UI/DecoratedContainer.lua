import "Turbine.UI";-- Takes a table of resources in parameter with named fields: topLeft, top, topRight, right, bottomRight, bottom, bottomLeft, left, center-- All fields are optionalDecoratedContainer = class( Turbine.UI.Control );function DecoratedContainer:Constructor( t )	Turbine.UI.Control.Constructor( self );	self:SetDecoration( t );		self.SizeChanged = function( sender, args ) self:DoLayout() endendfunction DecoratedContainer:SetDecoration( t )	local newControl = function() 		local control = Turbine.UI.Control();		control:SetParent( self );		control:SetMouseVisible(false);		control:SetBlendMode( Turbine.UI.BlendMode.AlphaBlend );		control:SetBackColorBlendMode( Turbine.UI.BlendMode.AlphaBlend );		return control	end	self:SetMouseVisible( false );	self.center = newControl();	if t.center ~= nil then		self.center:SetBackground( t.center );	--	self.center:SetBlendMode( Turbine.UI.BlendMode.AlphaBlend );	elseif t.centerColor ~= nil then		self.center:SetBackColor( t.centerColor );	end	if t.topLeft ~= nil then		self.topLeft = newControl();		self.topLeft:SetBackground( t.topLeft );		self.topLeft:SetStretchMode( 2 );		self.topLeftWidth = self.topLeft:GetWidth();		self.topLeftHeight = self.topLeft:GetHeight();		self.topLeft:SetStretchMode( 0 );	else		self.topLeftWidth = 0;		self.topLeftHeight = 0;	end	if t.top ~= nil then		self.top = newControl();		self.top:SetBackground( t.top );		self.top:SetStretchMode( 2 );		self.top:SetStretchMode( 0 );	end	if t.topRight ~= nil then		self.topRight = newControl();		self.topRight:SetBackground( t.topRight );		self.topRight:SetStretchMode( 2 );		self.topRightWidth = self.topRight:GetWidth();		self.topRightHeight = self.topRight:GetHeight();		self.topRight:SetStretchMode( 0 );	else		self.topRightWidth = 0;		self.topRightHeight = 0;	end		if t.right ~= nil then		self.right = newControl();			self.right:SetBackground( t.right );		self.right:SetStretchMode( 2 );		self.rightWidth = self.right:GetWidth();		self.right:SetStretchMode( 0 );	end	if t.bottomRight ~= nil then		self.bottomRight = newControl();		self.bottomRight:SetBackground( t.bottomRight );		self.bottomRight:SetStretchMode( 2 );		self.bottomRightWidth = self.bottomRight:GetWidth( );		self.bottomRightHeight = self.bottomRight:GetHeight();		self.bottomRight:SetStretchMode( 0 );	else		self.bottomRightWidth = 0;		self.bottomRightHeight = 0;	end			if t.bottom ~= nil then		self.bottom = newControl();		self.bottom:SetBackground( t.bottom );		self.bottom:SetStretchMode( 2 );		self.bottomHeight = self.bottom:GetHeight();		self.bottom:SetStretchMode( 0 );	end			if t.bottomLeft ~= nil then		self.bottomLeft = newControl();			self.bottomLeft:SetBackground( t.bottomLeft );		self.bottomLeft:SetStretchMode( 2 );		self.bottomLeftWidth = self.bottomLeft:GetWidth();		self.bottomLeftHeight = self.bottomLeft:GetHeight();		self.bottomLeft:SetStretchMode( 0 );	else		self.bottomLeftWidth = 0;		self.bottomLeftHeight = 0;	end	if t.left ~= nil then		self.left = newControl();		self.left:SetBackground( t.left );		self.left:SetStretchMode( 2 );		self.left:SetStretchMode( 0 );	end		self:DoLayout();endfunction DecoratedContainer:DoLayout()	if self.topLeft ~= nil then		self.topLeft:SetPosition( 0, 0 );	end	if self.topRight ~= nil then		self.topRight:SetPosition( self:GetWidth() - self.topRightWidth, 0 );	end		if self.bottomRight ~= nil then		self.bottomRight:SetPosition( self:GetWidth() - self.bottomRightWidth, self:GetHeight() - self.bottomRightHeight );		end	if self.bottomLeft ~= nil then		self.bottomLeft:SetPosition( 0, self:GetHeight() - self.bottomLeftHeight );	end		if self.top ~= nil then		self.top:SetWidth( self:GetWidth() - self.topLeftWidth - self.topRightWidth );		self.top:SetPosition( self.topLeftWidth, 0 );	end	if self.right ~= nil then		self.right:SetPosition( self:GetWidth() - self.rightWidth, self.topRightHeight );		self.right:SetHeight( self:GetHeight() - self.topRightHeight - self.bottomRightHeight );	end		if self.bottom ~= nil then		self.bottom:SetPosition( self.bottomLeftWidth, self:GetHeight() - self.bottomHeight );		self.bottom:SetWidth( self:GetWidth() - self.bottomLeftWidth - self.bottomRightWidth );	end	if self.left ~= nil then		self.left:SetPosition( 0, self.topLeftHeight );		self.left:SetHeight( self:GetHeight() - self.topLeftHeight - self.bottomLeftHeight );	end	if self.center ~= nil then		self.center:SetPosition( 0, 0 );		self.center:SetSize( self:GetWidth( ), self:GetHeight() );	endend